digraph {
	subgraph cluster_pack {
		label="pack(size: int, n1: int, n2: int, n3: int, n4: int, n5: int)";
		rankdir="TB";
		pack_0 [label="START", shape="rectangle", style="rounded"];
		pack_2 [label="[n1, n2, n3, n4, n5, size]\n----------\none := 1\ni := 0\narray := alloc size\nloc := array + i\n*loc := n1\ni := i + one\nloc := array + i\n*loc := n2\ni := i + one\nloc := array + i\n*loc := n3\ni := i + one\nloc := array + i\n*loc := n4\ni := i + one\nloc := array + i\n*loc := n5\nreturn array\n----------\n[]", shape="rectangle", style="rounded"];

		pack_0 -> pack_2;
	}
	subgraph cluster_print_array {
		label="print_array(array: ptr<int>, size: int)";
		rankdir="TB";
		print_array_0 [label="START", shape="rectangle", style="rounded"];
		print_array_2 [label="[array, size]\n----------\ni := 0\none := 1\n----------\n[array, i, one, size]", shape="rectangle", style="rounded"];
		print_array_3 [label="[array, i, one, size]\n----------\ncond := i < size\nif cond\n----------\n[array, i, one, size]", shape="rectangle", style="rounded"];
		print_array_4 [label="[array, i, one, size]\n----------\nloc := array + i\nval := *loc\nprint val\n----------\n[array, i, one, size]", shape="rectangle", style="rounded"];
		print_array_5 [label="[array, i, one, size]\n----------\ni := i + one\n----------\n[array, i, one, size]", shape="rectangle", style="rounded"];
		print_array_6 [label="[]\n----------\nreturn\n----------\n[]", shape="rectangle", style="rounded"];

		print_array_0 -> print_array_2;
		print_array_2 -> print_array_3;
		print_array_3 -> print_array_4 [label="T"];
		print_array_3 -> print_array_6 [label="F"];
		print_array_4 -> print_array_5;
		print_array_5 -> print_array_3;
	}
	subgraph cluster_binary_search {
		label="binary_search(array: ptr<int>, target: int, left: int, right: int)";
		rankdir="TB";
		binary_search_0 [label="START", shape="rectangle", style="rounded"];
		binary_search_2 [label="[array, left, right, target]\n----------\nnegone := -1\nzero := 0\none := 1\ntwo := 2\n----------\n[array, left, negone, one, right, target, two]", shape="rectangle", style="rounded"];
		binary_search_3 [label="[array, left, negone, one, right, target, two]\n----------\nend_cond := left > right\nif end_cond\n----------\n[array, left, negone, one, right, target, two]", shape="rectangle", style="rounded"];
		binary_search_4 [label="[array, left, one, right, target, two]\n----------\nmid := left + right\nmid := mid / two\n----------\n[array, left, mid, one, right, target]", shape="rectangle", style="rounded"];
		binary_search_5 [label="[array, left, mid, one, right, target]\n----------\nmidloc := array + mid\nmidval := *midloc\nequal_cond := target == midval\nif equal_cond\n----------\n[array, left, mid, midval, one, right, target]", shape="rectangle", style="rounded"];
		binary_search_6 [label="[mid]\n----------\nreturn mid\n----------\n[]", shape="rectangle", style="rounded"];
		binary_search_7 [label="[array, left, midval, one, right, target]\n----------\ngt_cond := target > midval\nif gt_cond\n----------\n[array, left, one, right, target]", shape="rectangle", style="rounded"];
		binary_search_8 [label="[array, left, one, right, target]\n----------\nnewleft := left + one\noutput := binary_search(array, target, newleft, right)\nreturn output\n----------\n[]", shape="rectangle", style="rounded"];
		binary_search_9 [label="[array, left, one, right, target]\n----------\nnewright := right - one\noutput := binary_search(array, target, left, newright)\nreturn output\n----------\n[]", shape="rectangle", style="rounded"];
		binary_search_10 [label="[negone]\n----------\noutput := negone\nreturn output\n----------\n[]", shape="rectangle", style="rounded"];

		binary_search_0 -> binary_search_2;
		binary_search_2 -> binary_search_3;
		binary_search_3 -> binary_search_10 [label="T"];
		binary_search_3 -> binary_search_4 [label="F"];
		binary_search_4 -> binary_search_5;
		binary_search_5 -> binary_search_6 [label="T"];
		binary_search_5 -> binary_search_7 [label="F"];
		binary_search_7 -> binary_search_8 [label="T"];
		binary_search_7 -> binary_search_9 [label="F"];
	}
	subgraph cluster_main {
		label="main()";
		rankdir="TB";
		main_0 [label="START", shape="rectangle", style="rounded"];
		main_2 [label="[]\n----------\ntarget := 7\nsize := 5\ne1 := 1\ne2 := 2\ne3 := 6\ne4 := 7\ne5 := 11\nzero := 0\nfour := 4\narray := pack(size, e1, e2, e3, e4, e5)\noutput := binary_search(array, target, zero, four)\nprint output\nfree array\n----------\n[]", shape="rectangle", style="rounded"];

		main_0 -> main_2;
	}
}
